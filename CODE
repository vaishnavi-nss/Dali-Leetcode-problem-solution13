#include <vector>
#include <algorithm>

class Solution {
public:
    int largestSubmatrix(std::vector<std::vector<int>>& matrix) {
        int m = matrix.size(), n = matrix[0].size();
        
        // Convert matrix to height representation
        for (int i = 1; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j] == 1) {
                    matrix[i][j] += matrix[i - 1][j];  // Accumulate heights
                }
            }
        }

        int maxArea = 0;
        
        // Process each row independently
        for (int i = 0; i < m; ++i) {
            // Sort the row in descending order
            std::vector<int> heights = matrix[i];
            std::sort(heights.rbegin(), heights.rend());  // Sort in decreasing order
            
            // Compute max area using sorted heights
            for (int j = 0; j < n; ++j) {
                maxArea = std::max(maxArea, heights[j] * (j + 1));
            }
        }

        return maxArea;
    }
};
